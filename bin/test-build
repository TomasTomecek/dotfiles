#!/usr/bin/python3

"""
  image=${1:-fedora:23}  # default f23
  srpm=$(fedpkg srpm) | tail -n 1
  rm ./*.src.rpm

  docker run -ti -v $PWD:/src fedora:23 bash
"""

import os
import shutil
import sys
import subprocess
import time
from glob import glob


# TODO: run build as unpriv user
inner_script = """\
cd /src && \
dnf install -y dnf-plugins-core rpm-build && \
dnf builddep -y ./*.src.rpm && \
printf \'rpmbuild --define "_rpmdir ${{PWD}}" --rebuild {srpm}\n' >/root/.bash_history
"""


def get(l, k, d):
    try:
        return l[k]
    except IndexError:
        return d

def enumerate_srpms():
    return glob("./*.src.rpm")


def rm_srpms():
    for p in enumerate_srpms():
        os.remove(p)


def get_srpm_path():
    try:
        out = subprocess.check_output(["fedpkg", "srpm"])
    except subprocess.CalledProcessError:
        # maybe not dist-git?
        try:
            return os.path.basename(enumerate_srpms()[0])
        except IndexError:
            raise RuntimeError("no srpms found, this is not a dist-git repo")


    return os.path.basename(out.strip().split(b" ", 1)[1]).decode("utf-8")


image = get(sys.argv, 1, "registry.fedoraproject.org/fedora:26")
srpm = get_srpm_path()

import docker
try:
    d = docker.APIClient(version="auto")  # 2, changing API is fun
except AttributeError:
    d = docker.AutoVersionClient()  # 1
c = d.create_container(image,
                       command=["/bin/bash", "-c", inner_script.format(srpm=srpm)],
                       tty=True,
                       volumes=["/src"],
                       working_dir="/src",
                       host_config=d.create_host_config(binds=["%s:/src" % os.getcwd()]))

d.start(c)
try:
    for l in d.logs(c, follow=True, stream=True):
        print(l, end="")
except Exception as ex:
    print("An exception happened during processing logs: %s", ex)

# obviously, this can raise exc:
#   requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionRefusedError(111, 'Connection refused'))
# TODO: verify it finished succesfully
try:
    d.wait(c)
except Exception as ex:
    print(repr(ex))
    print("Trying harder...")
    time.sleep(5.0)

repository = "build-{}-{}".format(os.path.basename(os.getcwd()),
        subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"]).strip().decode("utf-8"))

d.commit(c, repository=repository)

import dockerpty

container = d.create_container(
    image=repository,
    stdin_open=True,
    tty=True,
    volumes=["/src"],
    host_config=d.create_host_config(binds=["%s:/src" % os.getcwd()]),
    command='/bin/bash',
)

dockerpty.start(d, container)
